Immutable TreeUtils
===================

{{ pkg.version }}

This module is a collection of helpers to access and traverse >ImmutableJS tree data structure with a DOM-inspired interface.

It is written in ES2015 and requires Node >= 6 or [any environment that supports generators](https://kangax.github.io/compat-table/es6/). If you somehow have to transpile to ES5 or below, make sure you provide a compatibily runtime (e.g. https://www.npmjs.com/package/regenerator-runtime).

It imposes some very basic conventions on your data structure, but I tried to make everything as low-level and configurable as possible. Still, a few
conditions that need to be met remain:

* A tree can have only one root node.
* Every node has to provide a unique identifier value under a key that is the same for all nodes in the tree.
* Child nodes have to be stored in an >Immutable.List under a key that is the the same for all nodes containing children.

## Getting started

You probably should feel comfortable working with >ImmutableJS data structures, so if you don't I strongly recommend you to get familiar with the concepts of >ImmutableJS first.

### Understanding key paths

As you already know, with >ImmutableJS we retrieve nested values like this:

```js
let map = Immutable.Map({a: { b: 'c' }});
map.getIn(['a', 'b']);
// 'c'
```
We could say that the key path to the value `'c'` is `['a', 'b']`.
Instead of an array you can also use >Immutable.Seq objects to describe key paths:
```js
map.getIn(Immutable.Seq.of('a', 'b'));
// 'c'
```

This might feel a little over the top at first but comes with a few advantages that are pivotal to >TreeUtils.
As a matter of fact, all the functions in this lib, that give you a node or a collection of nodes don't return the actual >ImmutableJS values but the key paths to the substate where the resulting node(s) are located. A lot of operations become very trivial with key paths. Let's look at the >parent function. Determining the parent of a given node represented by a key path is as simple as this:
```js
let nodePath = Immutable.Seq.of('data', 'childNodes', 0, 'childNodes', 1);
let parentPath = nodePath.skipLast(2);
```

The actual retrieval of the >ImmutableJS values is left to you, but you will notice that working with key paths can be quite fun. Imagine you want to get value at key `content` of the next sibling of a given node. You could do this like so:
```js
let keyPath = treeUtils.nextSibling(state, 'node-id');
let content = state.getIn(keyPath.concat('content'));

// or even shorter
let content = state.getIn(treeUtils.nextSibling(state, 'node-id').concat('name'));
```

**Please note, that while ImmutableJS works well with Arrays as key paths, >TreeUtils will only accept >Immutable.Seq objects as valid key paths.**

### Working with cursors

>TreeUtils works just fine with cursor libraries like [contrib/cursor](https://github.com/facebook/immutable-js/tree/master/contrib/cursor) or [immutable-cursors](https://github.com/lukasbuenger/immutable-cursors), because cursors actually implement >ImmutableJS interfaces.

### Tree mutation

>TreeUtils doesn't provide mutation helpers, because IMHO the varietiy of use cases and implementations ist just too huge to spec a sensible API for that kind of thing. However, simple mutation functions can easily be implemented. An insert function could look something like this:
```js
function insert(state, newNode, parentId, index) {
	return state.updateIn(
		tree.getById(state, parentId).concat('childNodes'),
		childNodes => childNodes.splice(index, 0, newNode)
	);
}
```

### Install and setup

Install the package from [npm](https://www.npmjs.com/package/immutable-treeutils):

```
npm install immutable-treeutils
```

Import the module and provide some state. Examples in the docs below refer to this data structure:

```javascript
import Immutable from 'immutable';
import TreeUtils from 'immutable-treeutils';

let treeUtils = new TreeUtils();

let data = Immutable.fromJS({
	id: 'root',
	name: 'My Documents',
	type: 'folder',
	childNodes: [
		{
			id: 'node-1',
			name: 'Pictures',
			type: 'folder',
			childNodes: [
				{
					id: 'node-2',
					name: 'Me in Paris',
					type: 'image'
				},
				{
					id: 'node-3',
					name: 'Barbecue July 2015',
					type: 'image'
				}
			]
		},
		{
			id: 'node-4',
			name: 'Music',
			type: 'folder',
			childNodes: [
				{
					id: 'node-5',
					name: 'Pink Floyd - Wish You Were Here',
					type: 'audio'
				},
				{
					id: 'node-6',
					name: 'The Doors - People Are Strange',
					type: 'audio'
				}
			]
		}
	]
});
```

## API Docs

{{{ docs }}}

## Development

Get the source:
```
git clone https://github.com/lukasbuenger/immutable-cursors
```

Install dependencies:
```
npm install
```

Lint the code:
```
npm run lint
```

Run the tests:
```
npm test
```

Build ES5/ES3:
```
npm run build
```

Build the docs / README:
```
npm run docs
```

Update all local dependencies:
```
npm run update-dependencies
```

## Changelog

##### 0.1.10
- Docs updated.

##### 0.1.9
- **API changes**:
	- >TreeUtils constructor accepts a `none` parameter to customize the result of queries with no results.
- ESLint rules changed to a somehow customized version of the well-established [AirBnB](https://github.com/airbnb/javascript) ruleset.
- Code base refactored according to the new linting rules.
- Build tests refactored to ES5.
- Dependencies updated.

##### 0.1.8
- Support default export in pre-ES2015 environments courtesy of [Jürgen Schlieber](https://github.com/jschlieber).

##### 0.1.7

- Dependencies updated.
- Fix several documentation typos and errors (npm install command :blush:) courtesy of [Jürgen Schlieber](https://github.com/jschlieber) and [Love Luang](https://github.com/luangch).
- Comparator functions used with >find or >filter receive the key path to the current node as second parameter courtesy of [Jürgen Schlieber](https://github.com/jschlieber).
- Fix test script to conform [jasmine-spec-reporter](https://github.com/bcaudan/jasmine-spec-reporter/)s new module structure.

##### 0.1.6

- Dependencies updated.
- Docs: Fix typos and source links.

##### 0.1.5

- Dependencies updated.
- All methods that need to evaluate whether a value exists or not check not only for `undefined` but for `null` as well now. Some methods were broken if you e.g. were using `null` as default value on >Immutable.Record definitions, which by some people is considered best practise.

##### 0.1.4

- Dependencies updated. Added tests for the transpiled source (trivial).

##### 0.1.3

- Minor fixes in API docs. Updated dependencies.

##### 0.1.2

- Migration to Babel 6 courtesy of [Kei Takashima](https://github.com/keit).
- README hint to use environment with generators enabled courtesy of [Emanuele Ingrosso](https://github.com/ingro).
- Further updated dependencies, most notably ImmutableJS.
- Added estraverse-fb to devDependencies (https://github.com/eslint/eslint/issues/5476).

## License

See [LICENSE](LICENSE) file.
